name: k8s-ci-cd

on: 
  push:
    branches:
      - main

jobs:
  k8s-ci-cd:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: flask-webapp
      IMAGE_TAG: ${{ github.sha }}
      KIND_CLUSTER_NAME: ${{ github.run_id }}
      KUBECONFIG: ${{ github.workspace }}/.kube/config.yml
      NAMESPACE: demo
      RELEASE_NAME: web-app

    steps:
      - name: Checkout code
        uses: actions/checkout@master


      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
        

      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip 
            pip install -r flask-webapp/requirements.txt


      - name: Install Kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest' 
        id: install


      - name: Install Kind
        run: |
            curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.29.0/kind-linux-amd64
            chmod +x ./kind
            mv ./kind /usr/local/bin/kind


      - name: Create KinD cluster
        run: |
            kind create cluster --name ${{env.KIND_CLUSTER_NAME}}
            printf "\n--- Clusters ---\n"
            kind get clusters
            printf "\n--- Cluster-info ---\n"
            kubectl cluster-info --context kind-${{env.KIND_CLUSTER_NAME}} || kubectl cluster-info
            

      - name: Build, load image and apply manifest k8s.yml
        run: | 
            python k8s.py


      - name: Install Metrics Server
        run: |
          kubectl apply -f components.yaml  
          sleep 60
          printf "\n--- Deployments ---\n"
          kubectl get deployment metrics-server -n kube-system
          printf "\n--- Nodes ---\n"
          kubectl top nodes        


      - name: Configure kubectl
        run: |
            mkdir -p $(dirname "${{env.KUBECONFIG}}")
            kind get kubeconfig --name ${{env.KIND_CLUSTER_NAME}} > "${{env.KUBECONFIG}}"
            echo "KUBECONFIG=${{env.KUBECONFIG}}" >> ${GITHUB_ENV}
            kubectl config use-context kind-${{env.KIND_CLUSTER_NAME}}
            kubectl get nodes
            kubectl config get-contexts
            

      - name: Install Helm
        uses: azure/setup-helm@v3


      - name: Deploy Helm chart
        run: |
            helm upgrade --install ${{env.RELEASE_NAME}} ./helm-chart -n ${{env.NAMESPACE}} --create-namespace 
            sleep 60
            printf "\n--- Resources ---\n"
            kubectl get all -n ${{env.NAMESPACE}}
            printf "\n--- Details ---\n"
            kubectl describe deployment ${{env.RELEASE_NAME}} -n ${{env.NAMESPACE}}

        
      - name: Run tests
        run: pytest ./test


      - name: Smoke test the service
        run: |
            SVC=${{env.RELEASE_NAME}}-helm-chart
            PORT=$(kubectl -n ${{env.NAMESPACE}} get svc ${SVC} -o jsonpath='{.spec.ports[0].port}' 2>/dev/null) || { echo "svc not found"; exit 1; }
            kubectl -n ${{env.NAMESPACE}} port-forward svc/${SVC} 5000:${PORT} >/dev/null 2>&1 & PF=$!; sleep 2
            HTTP_CODE=$(curl -s --max-time 5 -o /dev/null -w '%{http_code}' http://127.0.0.1:5000 || echo 000)
            kill $PF 2>/dev/null || true
            if [ "${HTTP_CODE}" -ge 200 ] && [ "${HTTP_CODE}" -lt 300 ]; then echo "Service is healthy"; else echo "Service failed: ${HTTP_CODE}"; exit 1; fi


      - name: Dump pod logs for debugging
        run: |
            for p in $(kubectl -n ${{env.NAMESPACE}} get pods -o name); do
              echo "Logs for Pod: $p"
              kubectl -n ${{env.NAMESPACE}} logs $p --all-containers || true
            done

      
      - name: Cleanup
        if: always()
        run: |
          for c in $(kind get clusters); do kind delete cluster --name $c; done || true
         

