name: k8s-ci-cd

on: 
  push:
    branches:
      - main
  
jobs:
  k8s-ci-cd:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
        
      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip 
            pip install -r flask-webapp/requirements.txt
            pip install pyyaml

      - name: Run tests
        run: pytest test/

      # - name: Set up Minikube
      #   uses: manusa/actions-setup-minikube@v2.14.0
      #   with:
      #     minikube version: "v1.33.1"
      #     kubernetes version: "v1.27.4"
      #     driver: docker

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -Lsf https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/


      - name: Create KinD cluster
        uses: helm/kind-action@v1
        with:
          # version: v0.29.0
        #   alwaysDownload: true
          cluster_name: "kind-${{ github.run_id }}"
        #   wait: 60s
        #   continue-on-error: true


      - name: "Debug: list Kind clusters"
        run: |
          kind get clusters


      - name: Configure kubectl
        run: |
            mkdir -p $HOME/.kube
            kind get kubeconfig --name kind-${{ github.run_id }} > $HOME/.kube/config.yml
            echo "KUBECONFIG=$HOME/.kube/config.yml" >> $GITHUB_ENV
            kubectl cluster-info

      - name: Build & Load Docker image
        run: |
            docker build -t flask-webapp:latest flask-webapp/
            kind load docker-image flask-webapp:latest --name kind-${{ github.run_id }}
          

      # - name: Point Docker CLI to Minikube
      #   run: |
      #     eval "$(minikube docker-env --shell=bash)"
      #     echo "DOCKER_HOST=$DOCKER_HOST" >> $GITHUB_ENV
      #     echo "DOCKER_TLS_VERIFY=$DOCKER_TLS_VERIFY" >> $GITHUB_ENV
      #     echo "DOCKER_CERT_PATH=$DOCKER_CERT_PATH" >> $GITHUB_ENV
      

      # - name: Load Docker env for Minikube
      #   run: |
      #       echo "::group::Minikube Docker Environment"
      #       eval $(minikube docker-env)
      #       echo "::endgroup::"

      # - name: Build & Cache Docker image
      #   run: |
      #       docker build -t flask-webapp:latest flask-webapp/
      #       minikube cache add flask-webapp:latest
      
      - name: Deploy to cluster
        run: |
            kubectl apply -f k8s.yml

      - name: Debug K8s 
        run: |
            kubectl get pods -o wide
            kubectl describe pods
            for p in $(kubectl get pods -o name); do
              echo "--- Logs for $p ---"
              kubectl logs $p || true
            done

      - name: Wait for deployment
        run: |
            kubectl rollout status deployment/flask-webapp --timeout=20s

      - name: Smoke test the service
        run: |
            kubectl port-forward service/flask-webapp-service 5000:5000 & PF_PID=$!
            sleep 5
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000)
            echo "HTTP Code: $HTTP_CODE"
            if [[ $HTTP_CODE -lt 200 || $HTTP_CODE -ge 300 ]]; then
              echo "Service is not responding as expected. HTTP Code: $HTTP_CODE"
              exit 1
            fi
            echo "Service is up and running with HTTP Code: $HTTP_CODE"
            kill $PF_PID || true
    